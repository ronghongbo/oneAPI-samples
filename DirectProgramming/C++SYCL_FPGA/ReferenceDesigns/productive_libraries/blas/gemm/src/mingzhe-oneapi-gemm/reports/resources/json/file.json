[{"path":"/home/u114360/t2s-oneapi/include/exception_handler.hpp", "name":"exception_handler.hpp", "has_active_debug_locs":false, "absName":"/home/u114360/t2s-oneapi/include/exception_handler.hpp", "content":"#ifndef __EXCEPTIONHANDLER_HPP__\u000A#define __EXCEPTIONHANDLER_HPP__\u000A#include <exception>\u000A#include <iostream>\u000A#include <sycl/sycl.hpp>\u000A\u000Anamespace fpga_tools {\u000A\u000Avoid exception_handler(sycl::exception_list exceptions) {\u000A    for (std::exception_ptr const &e : exceptions) {\u000A        try {\u000A            std::rethrow_exception(e);\u000A        } catch (sycl::exception const &e) {\u000A            std::cout << \"Caught asynchronous SYCL exception:\\n\"\u000A                      << e.what() << std::endl;\u000A        }\u000A    }\u000A}\u000A\u000A} // namespace fpga_tools\u000A\u000A#endif //__EXCEPTIONHANDLER_HPP__"}, {"path":"/home/u114360/t2s-oneapi/gemm/src/gemm.cpp", "name":"gemm.cpp", "has_active_debug_locs":false, "absName":"/home/u114360/t2s-oneapi/gemm/src/gemm.cpp", "content":"#include <sycl/ext/intel/fpga_extensions.hpp>\u000A#include <sycl/sycl.hpp>\u000A\u000A#include \"exception_handler.hpp\"\u000A#include \"gemm.h\"\u000A\u000Aint main(int argc, char *argv[]) {\u000A#if defined(FPGA_EMULATOR)\u000A    std::cout << \"USING FPGA EMULATOR\" << std::endl;\u000A    sycl::ext::intel::fpga_emulator_selector device_selector;\u000A#else\u000A    std::cout << \"USING FPGA HARDWARE\" << std::endl;\u000A    sycl::ext::intel::fpga_selector device_selector;\u000A#endif\u000A    sycl::queue q(device_selector, fpga_tools::exception_handler,\u000A                  sycl::property::queue::enable_profiling());\u000A    std::cout << \"Device name: \"\u000A              << q.get_device().get_info<sycl::info::device::name>().c_str()\u000A              << std::endl;\u000A\u000A    float *A = (float *)malloc(num_elem_A * sizeof(float));\u000A    float *B = (float *)malloc(num_elem_B * sizeof(float));\u000A    float *C = (float *)malloc(num_elem_C * sizeof(float));\u000A\u000A    // Generate the random input matrices\u000A    for (size_t i = 0; i < TOTAL_I; i++) {\u000A        for (size_t k = 0; k < TOTAL_K; k++) {\u000A            A[k + i * TOTAL_K] = random();\u000A        }\u000A    }\u000A    for (size_t j = 0; j < TOTAL_J; j++) {\u000A        for (size_t k = 0; k < TOTAL_K; k++) {\u000A            B[j + k * TOTAL_J] = A[k + j * TOTAL_K];\u000A        }\u000A    }\u000A\u000A    gemm(A, B, C, q);\u000A\u000A    bool passed = true;\u000A    for (size_t i = 0; i < TOTAL_I; i++) {\u000A        for (size_t j = 0; j < TOTAL_J; j++) {\u000A            float golden = 0.0f;\u000A            for (size_t k = 0; k < TOTAL_K; k++) {\u000A                golden += A[k + i * TOTAL_K] * B[j + k * TOTAL_J];\u000A            }\u000A            passed &= fabs(golden - C[j + i * TOTAL_J]) < 0.005 * fabs(golden);\u000A        }\u000A    }\u000A\u000A    if (passed) {\u000A        printf(\"[PASSED]\\n\");\u000A    } else {\u000A        printf(\"[FAILED]\\n\");\u000A    }\u000A    free(A);\u000A    free(B);\u000A    free(C);\u000A}\u000A"}, {"path":"/home/u114360/t2s-oneapi/gemm/src/gemm.h", "name":"gemm.h", "has_active_debug_locs":false, "absName":"/home/u114360/t2s-oneapi/gemm/src/gemm.h", "content":"#pragma once\u000A\u000A#include <iostream>\u000A#include <list>\u000A#include <stdlib.h>\u000A#include <vector>\u000A\u000A#include <sycl/ext/intel/fpga_extensions.hpp>\u000A#include <sycl/sycl.hpp>\u000A\u000A#ifdef FPGA_EMULATOR\u000A#define KKK 16\u000A#define JJJ 8\u000A#define III 10\u000A#define JJ 32\u000A#define II 32\u000A#define KK 32\u000A#define K 2\u000A#define J 2\u000A#define I 2\u000A#else\u000A#define KKK 16\u000A#define JJJ 8\u000A#define III 10\u000A#define JJ 32\u000A#define II 32\u000A#define KK 32\u000A#define K 32\u000A#define J 32\u000A#define I 32\u000A#endif\u000A\u000A#define ADD_INT64_T_SUFFIX(x) x##l\u000A#define ADD_UINT64_T_SUFFIX(x) x##ul\u000A\u000A#ifdef __SYCL_DEVICE_ONLY__\u000A#define CL_CONSTANT __attribute__((opencl_constant))\u000A#else\u000A#define CL_CONSTANT\u000A#endif\u000A\u000Ausing namespace sycl;\u000A\u000A#define PRINTF(format, ...)                                                    \\\u000A    {                                                                          \\\u000A        static const CL_CONSTANT char _format[] = format;                      \\\u000A        ext::oneapi::experimental::printf(_format, ##__VA_ARGS__);             \\\u000A    }\u000A\u000Aconstexpr size_t TOTAL_I = III * II * I;\u000Aconstexpr size_t TOTAL_J = JJJ * JJ * J;\u000Aconstexpr size_t TOTAL_K = KKK * KK * K;\u000Aconstexpr size_t num_elem_A = TOTAL_K * TOTAL_I;\u000Aconstexpr size_t num_elem_B = TOTAL_J * TOTAL_K;\u000Aconstexpr size_t num_elem_C = TOTAL_J * TOTAL_I;\u000A\u000Ausing _aLoader_channel =\u000A    sycl::ext::intel::pipe<class _aLoader_channel_pipe, float16, 256>;\u000Atypedef struct {\u000A    float16 s[10];\u000A} _aFeeder_channel_array_t;\u000Ausing _aFeeder_channel = sycl::ext::intel::pipe<class _aFeeder_channel_pipe,\u000A                                                _aFeeder_channel_array_t, 256>;\u000Ausing _bLoader_channel =\u000A    sycl::ext::intel::pipe<class _bLoader_channel_pipe, float16, 256>;\u000Atypedef struct {\u000A    float16 s[8];\u000A} _bFeeder_channel_array_t;\u000Ausing _bFeeder_channel = sycl::ext::intel::pipe<class _bFeeder_channel_pipe,\u000A                                                _bFeeder_channel_array_t, 256>;\u000Ausing _Out_channel =\u000A    sycl::ext::intel::pipe<class _Out_channel_pipe, float8, 256>;\u000A\u000Avoid gemm(float *A, float *B, float *C, sycl::queue &q) {\u000A    std::vector<sycl::event> oneapi_kernel_events;\u000A    float *serialized_A = (float *)malloc(num_elem_A * sizeof(float));\u000A    float *serialized_B = (float *)malloc(num_elem_B * sizeof(float));\u000A    float *serialized_C = (float *)malloc(num_elem_C * sizeof(float));\u000A    float *serialized_A_device = sycl::malloc_device<float>(num_elem_A, q);\u000A    float *serialized_B_device = sycl::malloc_device<float>(num_elem_B, q);\u000A    float *serialized_C_device = sycl::malloc_device<float>(num_elem_C, q);\u000A\u000A    // kernel_A_serializer\u000A    std::cout << \"kernel_A_serializer\" << std::endl;\u000A    size_t addr = 0;\u000A    for (int i = 0; i < I; i++)\u000A        for (int k = 0; k < K; k++)\u000A            for (int kk = 0; kk < KK; kk++)\u000A                for (int ii = 0; ii < II; ii++)\u000A                    for (int iii = 0; iii < III; iii++)\u000A                        for (int kkk = 0; kkk < KKK; kkk++) {\u000A                            int total_k = kkk + KKK * kk + KKK * KK * k;\u000A                            int total_i = iii + III * ii + III * II * i;\u000A                            serialized_A[addr++] =\u000A                                A[total_k + total_i * TOTAL_K];\u000A                        }\u000A\u000A    // kernel_B_serializer\u000A    std::cout << \"kernel_B_serializer\" << std::endl;\u000A    addr = 0;\u000A    for (int j = 0; j < J; j++)\u000A        for (int k = 0; k < K; k++)\u000A            for (int kk = 0; kk < KK; kk++)\u000A                for (int jj = 0; jj < JJ; jj++)\u000A                    for (int jjj = 0; jjj < JJJ; jjj++)\u000A                        for (int kkk = 0; kkk < KKK; kkk++) {\u000A                            int total_k = kkk + KKK * kk + KKK * KK * k;\u000A                            int total_j = jjj + JJJ * jj + JJJ * JJ * j;\u000A                            serialized_B[addr++] =\u000A                                B[total_j + total_k * TOTAL_J];\u000A                        }\u000A\u000A    std::cout << \"memcpy matrix A host->device\" << std::endl;\u000A    q.memcpy(serialized_A_device, serialized_A, num_elem_A * sizeof(float))\u000A        .wait();\u000A    std::cout << \"memcpy matrix B host->device\" << std::endl;\u000A    q.memcpy(serialized_B_device, serialized_B, num_elem_B * sizeof(float))\u000A        .wait();\u000A\u000A    // kernel_aLoader\u000A    std::cout << \"kernel_aLoader\" << std::endl;\u000A    oneapi_kernel_events.push_back(q.submit([&](sycl::handler &h) {\u000A        h.single_task<class kernel_aLoader>(\u000A            [=]() [[intel::kernel_args_restrict]] {\u000A                device_ptr<float> serialized_A_d(serialized_A_device);\u000A                int _addr_temp;\u000A                _addr_temp = 0;\u000A                int _0 = TOTAL_I / 320;\u000A                for (int _aLoader_s0_i = 0; _aLoader_s0_i < 0 + _0;\u000A                     _aLoader_s0_i++) {\u000A                    int _1 = TOTAL_J >> 8;\u000A                    for (int _aLoader_s0_j = 0; _aLoader_s0_j < 0 + _1;\u000A                         _aLoader_s0_j++) {\u000A                        int _2 = TOTAL_K >> 9;\u000A                        for (int _aLoader_s0_k = 0; _aLoader_s0_k < 0 + _2;\u000A                             _aLoader_s0_k++) {\u000A                            for (int _aLoader_s0_kk_ii_iii = 0;\u000A                                 _aLoader_s0_kk_ii_iii < 0 + 10240;\u000A                                 _aLoader_s0_kk_ii_iii++) {\u000A                                int _3 = _addr_temp;\u000A                                int _4 = TOTAL_J >> 8;\u000A                                int _5 = TOTAL_K >> 9;\u000A                                int _6 = _4 * _5;\u000A                                int _7 = _6 * 10240;\u000A                                int _8 = _3 / _7;\u000A                                int _9 = _8 * _5;\u000A                                int _10 = _9 * 10240;\u000A                                int _11 = _5 * 10240;\u000A                                int _12 = _3 % _11;\u000A                                int _13 = _10 + _12;\u000A                                int _14 = _13 * 16;\u000A                                float16 _15;\u000A#pragma unroll\u000A                                for (int vec_idx = 0; vec_idx < 16; vec_idx++) {\u000A                                    _15[vec_idx] =\u000A                                        serialized_A_d[_14 + vec_idx];\u000A                                }\u000A                                _aLoader_channel::write(_15);\u000A                                (void)_15;\u000A                                int _16 = _3 + 1;\u000A                                _addr_temp = _16;\u000A                            } // for _aLoader_s0_kk_ii_iii\u000A                        }     // for _aLoader_s0_k\u000A                    }         // for _aLoader_s0_j\u000A                }             // for _aLoader_s0_i\u000A            });\u000A    }));\u000A\u000A    // kernel_aFeeder\u000A    std::cout << \"kernel_aFeeder\" << std::endl;\u000A    oneapi_kernel_events.push_back(q.submit([&](sycl::handler &h) {\u000A        h.single_task<class kernel_aFeeder>([=]() {\u000A            _aFeeder_channel_array_t _aFeeder_channel_array;\u000A            float16 _aFeeder_value_shreg;\u000A            uint _aFeeder_time_stamp_shreg;\u000A            float16 _aFeeder_in_v_temp;\u000A            uint _aFeeder_cycle_temp;\u000A            [[intel::fpga_memory(), intel::numbanks(16), intel::singlepump,\u000A              intel::simple_dual_port]] float16 _aFeeder_DB_0_ibuffer[2][32][32]\u000A                                                                     [16];\u000A#pragma unroll\u000A            for (int _aFeeder_s0_jjj_init = 0; _aFeeder_s0_jjj_init < 0 + 8;\u000A                 _aFeeder_s0_jjj_init++) {\u000A                bool _17 = _aFeeder_s0_jjj_init == 0;\u000A                if (_17) {\u000A                    uint _18 = (uint)(ADD_UINT64_T_SUFFIX(22528));\u000A                    _aFeeder_cycle_temp = _18;\u000A                } // if _17\u000A            }     // for _aFeeder_s0_jjj_init\u000A            int _19 = TOTAL_K >> 9;\u000A            int _20 = TOTAL_I / 320;\u000A            int _21 = TOTAL_J >> 8;\u000A            int _22 = _20 * _21;\u000A            int _23 = _19 * _22;\u000A            int _24 = _23 * 32768;\u000A            int _25 = _24 + 32768;\u000A            for (int _aFeeder_s0_outermost_loop = 0;\u000A                 _aFeeder_s0_outermost_loop < 0 + _25;\u000A                 _aFeeder_s0_outermost_loop++) {\u000A                uint _26 = (uint)(ADD_UINT64_T_SUFFIX(22528));\u000A                uint _27 = _aFeeder_cycle_temp;\u000A                uint _28 = (uint)(ADD_UINT64_T_SUFFIX(32767));\u000A                uint _29 = _27 & _28;\u000A                bool _30 = _26 <= _29;\u000A                uint _31 = (uint)(ADD_UINT64_T_SUFFIX(15));\u000A                uint _32 = _27 >> _31;\u000A                int _33 = (int)(_32);\u000A                int _34 = TOTAL_K >> 9;\u000A                int _35 = TOTAL_I / 320;\u000A                int _36 = TOTAL_J >> 8;\u000A                int _37 = _35 * _36;\u000A                int _38 = _34 * _37;\u000A                bool _39 = _33 < _38;\u000A                bool _40 = _30 && _39;\u000A                if (_40) {\u000A                    float16 __41 = _aLoader_channel::read();\u000A                    _aFeeder_in_v_temp = __41;\u000A                } // if _40\u000A#pragma unroll\u000A                for (int _aFeeder_s0_buf = 0; _aFeeder_s0_buf < 0 + 10;\u000A                     _aFeeder_s0_buf++) {\u000A                    bool _42 = _aFeeder_s0_buf == 0;\u000A                    if (_42) {\u000A                        float16 _43 = _aFeeder_in_v_temp;\u000A                        _aFeeder_value_shreg = _43;\u000A                        (void)_43;\u000A                        uint _44 = _aFeeder_cycle_temp;\u000A                        _aFeeder_time_stamp_shreg = _44;\u000A                        (void)_44;\u000A                    } // if _42\u000A                    else {\u000A                        float16 _46 = _aFeeder_value_shreg;\u000A                        _aFeeder_value_shreg = _46;\u000A                        (void)_46;\u000A                        uint _48 = _aFeeder_time_stamp_shreg;\u000A                        _aFeeder_time_stamp_shreg = _48;\u000A                        (void)_48;\u000A                    } // if _42 else\u000A                    float16 _50 = _aFeeder_value_shreg;\u000A                    float16 _51;\u000A#pragma unroll\u000A                    for (int reg_idx = 0; reg_idx < 16; reg_idx++) {\u000A                        _51[reg_idx] = sycl::ext::intel::fpga_reg(\u000A                            sycl::ext::intel::fpga_reg(_50[reg_idx]));\u000A                    }\u000A                    _aFeeder_value_shreg = _51;\u000A                    (void)_51;\u000A                    uint _53 = _aFeeder_time_stamp_shreg;\u000A                    uint _54 = sycl::ext::intel::fpga_reg(\u000A                        sycl::ext::intel::fpga_reg(_53));\u000A                    _aFeeder_time_stamp_shreg = _54;\u000A                    (void)_54;\u000A                    uint _55 = (uint)(ADD_UINT64_T_SUFFIX(22528));\u000A                    uint _57 = _aFeeder_time_stamp_shreg;\u000A                    uint _58 = (uint)(ADD_UINT64_T_SUFFIX(32767));\u000A                    uint _59 = _57 & _58;\u000A                    bool _60 = _55 <= _59;\u000A                    if (_60) {\u000A                        uint _62 = _aFeeder_time_stamp_shreg;\u000A                        uint _63 = (uint)(ADD_UINT64_T_SUFFIX(32767));\u000A                        uint _64 = _62 & _63;\u000A                        uint _65 = (uint)(ADD_UINT64_T_SUFFIX(22528));\u000A                        uint _66 = _64 - _65;\u000A                        uint _67 = (uint)(ADD_UINT64_T_SUFFIX(10));\u000A                        uint _68 = _66 % _67;\u000A                        int _69 = (int)(_68);\u000A                        bool _70 = _aFeeder_s0_buf == _69;\u000A                        if (_70) {\u000A                            float16 _72 = _aFeeder_value_shreg;\u000A                            uint _74 = _aFeeder_time_stamp_shreg;\u000A                            uint _75 = (uint)(ADD_UINT64_T_SUFFIX(15));\u000A                            uint _76 = _74 >> _75;\u000A                            uint _77 = (uint)(ADD_UINT64_T_SUFFIX(1));\u000A                            uint _78 = _76 & _77;\u000A                            bool _79 = (bool)(_78);\u000A                            uint _81 = (uint)(ADD_UINT64_T_SUFFIX(32767));\u000A                            uint _82 = _74 & _81;\u000A                            uint _83 = (uint)(ADD_UINT64_T_SUFFIX(22528));\u000A                            uint _84 = _82 - _83;\u000A                            int _85 = (int)(_84);\u000A                            int _86 = _85 / 320;\u000A                            int _88 = _85 / 10;\u000A                            int _89 = _88 & 31;\u000A                            _aFeeder_DB_0_ibuffer[_79][_86][_89]\u000A                                                 [_aFeeder_s0_buf] = _72;\u000A                        } // if _70\u000A                    }     // if _60\u000A                    uint _91 = _aFeeder_time_stamp_shreg;\u000A                    uint _92 = (uint)(ADD_UINT64_T_SUFFIX(15));\u000A                    uint _93 = _91 >> _92;\u000A                    int _94 = (int)(_93);\u000A                    int _95 = TOTAL_K >> 9;\u000A                    int _96 = TOTAL_I / 320;\u000A                    int _97 = TOTAL_J >> 8;\u000A                    int _98 = _96 * _97;\u000A                    int _99 = _95 * _98;\u000A                    bool _100 = _94 <= _99;\u000A                    uint _101 = (uint)(ADD_UINT64_T_SUFFIX(0));\u000A                    bool _103 = _101 < _93;\u000A                    bool _104 = _100 && _103;\u000A                    if (_104) {\u000A                        uint _106 = _aFeeder_time_stamp_shreg;\u000A                        uint _107 = (uint)(ADD_UINT64_T_SUFFIX(15));\u000A                        uint _108 = _106 >> _107;\u000A                        uint _109 = (uint)(ADD_UINT64_T_SUFFIX(1));\u000A                        uint _110 = _108 & _109;\u000A                        bool _111 = (bool)(_110);\u000A                        bool _112 = !(_111);\u000A                        uint _114 = (uint)(ADD_UINT64_T_SUFFIX(32767));\u000A                        uint _115 = _106 & _114;\u000A                        int _116 = (int)(_115);\u000A                        int _117 = _116 >> 10;\u000A                        int _119 = _116 >> 5;\u000A                        int _120 = _119 & 31;\u000A                        float16 _121 = _aFeeder_DB_0_ibuffer[_112][_117][_120]\u000A                                                            [_aFeeder_s0_buf];\u000A                        _aFeeder_channel_array.s[_aFeeder_s0_buf] = _121;\u000A                        (void)_aFeeder_s0_buf;\u000A                    } // if _104\u000A                }     // for _aFeeder_s0_buf\u000A                uint _123 = _aFeeder_time_stamp_shreg;\u000A                uint _124 = (uint)(ADD_UINT64_T_SUFFIX(15));\u000A                uint _125 = _123 >> _124;\u000A                int _126 = (int)(_125);\u000A                int _127 = TOTAL_K >> 9;\u000A                int _128 = TOTAL_I / 320;\u000A                int _129 = TOTAL_J >> 8;\u000A                int _130 = _128 * _129;\u000A                int _131 = _127 * _130;\u000A                bool _132 = _126 <= _131;\u000A                uint _133 = (uint)(ADD_UINT64_T_SUFFIX(0));\u000A                bool _135 = _133 < _125;\u000A                bool _136 = _132 && _135;\u000A                if (_136) {\u000A                    _aFeeder_channel::write(_aFeeder_channel_array);\u000A                    (void)_aFeeder_channel_array;\u000A                } // if _136\u000A                uint _137 = _aFeeder_cycle_temp;\u000A                uint _138 = (uint)(ADD_UINT64_T_SUFFIX(1));\u000A                uint _139 = _137 + _138;\u000A                _aFeeder_cycle_temp = _139;\u000A            } // for _aFeeder_s0_outermost_loop\u000A        });\u000A    }));\u000A\u000A    // kernel_bLoader\u000A    std::cout << \"kernel_bLoader\" << std::endl;\u000A    oneapi_kernel_events.push_back(q.submit([&](sycl::handler &h) {\u000A        h.single_task<class kernel_bLoader>(\u000A            [=]() [[intel::kernel_args_restrict]] {\u000A                device_ptr<float> serialized_B_d(serialized_B_device);\u000A                int _addr_temp;\u000A                _addr_temp = 0;\u000A                int _140 = TOTAL_I / 320;\u000A                for (int _bLoader_s0_i = 0; _bLoader_s0_i < 0 + _140;\u000A                     _bLoader_s0_i++) {\u000A                    int _141 = TOTAL_J >> 8;\u000A                    for (int _bLoader_s0_j = 0; _bLoader_s0_j < 0 + _141;\u000A                         _bLoader_s0_j++) {\u000A                        int _142 = TOTAL_K >> 9;\u000A                        for (int _bLoader_s0_k = 0; _bLoader_s0_k < 0 + _142;\u000A                             _bLoader_s0_k++) {\u000A                            for (int _bLoader_s0_kk_jj_jjj = 0;\u000A                                 _bLoader_s0_kk_jj_jjj < 0 + 8192;\u000A                                 _bLoader_s0_kk_jj_jjj++) {\u000A                                int _143 = _addr_temp;\u000A                                int _144 = TOTAL_J >> 8;\u000A                                int _145 = TOTAL_K >> 9;\u000A                                int _146 = _144 * _145;\u000A                                int _147 = _146 * 8192;\u000A                                int _148 = _143 % _147;\u000A                                int _149 = _148 * 16;\u000A                                float16 _150;\u000A#pragma unroll\u000A                                for (int vec_idx = 0; vec_idx < 16; vec_idx++) {\u000A                                    _150[vec_idx] =\u000A                                        serialized_B_d[_149 + vec_idx];\u000A                                }\u000A                                _bLoader_channel::write(_150);\u000A                                (void)_150;\u000A                                int _151 = _143 + 1;\u000A                                _addr_temp = _151;\u000A                            } // for _bLoader_s0_kk_jj_jjj\u000A                        }     // for _bLoader_s0_k\u000A                    }         // for _bLoader_s0_j\u000A                }             // for _bLoader_s0_i\u000A            });\u000A    }));\u000A\u000A    // kernel_bFeeder\u000A    std::cout << \"kernel_bFeeder\" << std::endl;\u000A    oneapi_kernel_events.push_back(q.submit([&](sycl::handler &h) {\u000A        h.single_task<class kernel_bFeeder>([=]() {\u000A            _bFeeder_channel_array_t _bFeeder_channel_array;\u000A            float16 _bFeeder_value_shreg;\u000A            uint _bFeeder_time_stamp_shreg;\u000A            float16 _bFeeder_in_v_temp;\u000A            uint _bFeeder_cycle_temp;\u000A            [[intel::fpga_memory(), intel::numbanks(8), intel::singlepump,\u000A              intel::simple_dual_port]] float16 _bFeeder_DB_0_ibuffer[2][32][32]\u000A                                                                     [8];\u000A#pragma unroll\u000A            for (int _bFeeder_s0_iii_init = 0; _bFeeder_s0_iii_init < 0 + 10;\u000A                 _bFeeder_s0_iii_init++) {\u000A                bool _152 = _bFeeder_s0_iii_init == 0;\u000A                if (_152) {\u000A                    uint _153 = (uint)(ADD_UINT64_T_SUFFIX(24576));\u000A                    _bFeeder_cycle_temp = _153;\u000A                } // if _152\u000A            }     // for _bFeeder_s0_iii_init\u000A            int _154 = TOTAL_K >> 9;\u000A            int _155 = TOTAL_I / 320;\u000A            int _156 = TOTAL_J >> 8;\u000A            int _157 = _155 * _156;\u000A            int _158 = _154 * _157;\u000A            int _159 = _158 * 32768;\u000A            int _160 = _159 + 32768;\u000A            for (int _bFeeder_s0_outermost_loop = 0;\u000A                 _bFeeder_s0_outermost_loop < 0 + _160;\u000A                 _bFeeder_s0_outermost_loop++) {\u000A                uint _161 = (uint)(ADD_UINT64_T_SUFFIX(24576));\u000A                uint _162 = _bFeeder_cycle_temp;\u000A                uint _163 = (uint)(ADD_UINT64_T_SUFFIX(32767));\u000A                uint _164 = _162 & _163;\u000A                bool _165 = _161 <= _164;\u000A                uint _166 = (uint)(ADD_UINT64_T_SUFFIX(15));\u000A                uint _167 = _162 >> _166;\u000A                int _168 = (int)(_167);\u000A                int _169 = TOTAL_K >> 9;\u000A                int _170 = TOTAL_I / 320;\u000A                int _171 = TOTAL_J >> 8;\u000A                int _172 = _170 * _171;\u000A                int _173 = _169 * _172;\u000A                bool _174 = _168 < _173;\u000A                bool _175 = _165 && _174;\u000A                if (_175) {\u000A                    float16 __176 = _bLoader_channel::read();\u000A                    _bFeeder_in_v_temp = __176;\u000A                } // if _175\u000A#pragma unroll\u000A                for (int _bFeeder_s0_buf = 0; _bFeeder_s0_buf < 0 + 8;\u000A                     _bFeeder_s0_buf++) {\u000A                    bool _177 = _bFeeder_s0_buf == 0;\u000A                    if (_177) {\u000A                        float16 _178 = _bFeeder_in_v_temp;\u000A                        _bFeeder_value_shreg = _178;\u000A                        (void)_178;\u000A                        uint _179 = _bFeeder_cycle_temp;\u000A                        _bFeeder_time_stamp_shreg = _179;\u000A                        (void)_179;\u000A                    } // if _177\u000A                    else {\u000A                        float16 _181 = _bFeeder_value_shreg;\u000A                        _bFeeder_value_shreg = _181;\u000A                        (void)_181;\u000A                        uint _183 = _bFeeder_time_stamp_shreg;\u000A                        _bFeeder_time_stamp_shreg = _183;\u000A                        (void)_183;\u000A                    } // if _177 else\u000A                    float16 _185 = _bFeeder_value_shreg;\u000A                    float16 _186;\u000A#pragma unroll\u000A                    for (int reg_idx = 0; reg_idx < 16; reg_idx++) {\u000A                        _186[reg_idx] = sycl::ext::intel::fpga_reg(\u000A                            sycl::ext::intel::fpga_reg(_185[reg_idx]));\u000A                    }\u000A                    _bFeeder_value_shreg = _186;\u000A                    (void)_186;\u000A                    uint _188 = _bFeeder_time_stamp_shreg;\u000A                    uint _189 = sycl::ext::intel::fpga_reg(\u000A                        sycl::ext::intel::fpga_reg(_188));\u000A                    _bFeeder_time_stamp_shreg = _189;\u000A                    (void)_189;\u000A                    uint _190 = (uint)(ADD_UINT64_T_SUFFIX(24576));\u000A                    uint _192 = _bFeeder_time_stamp_shreg;\u000A                    uint _193 = (uint)(ADD_UINT64_T_SUFFIX(32767));\u000A                    uint _194 = _192 & _193;\u000A                    bool _195 = _190 <= _194;\u000A                    if (_195) {\u000A                        uint _197 = _bFeeder_time_stamp_shreg;\u000A                        uint _198 = (uint)(ADD_UINT64_T_SUFFIX(32767));\u000A                        uint _199 = _197 & _198;\u000A                        uint _200 = (uint)(ADD_UINT64_T_SUFFIX(24576));\u000A                        uint _201 = _199 - _200;\u000A                        uint _202 = (uint)(ADD_UINT64_T_SUFFIX(7));\u000A                        uint _203 = _201 & _202;\u000A                        int _204 = (int)(_203);\u000A                        bool _205 = _bFeeder_s0_buf == _204;\u000A                        if (_205) {\u000A                            float16 _207 = _bFeeder_value_shreg;\u000A                            uint _209 = _bFeeder_time_stamp_shreg;\u000A                            uint _210 = (uint)(ADD_UINT64_T_SUFFIX(15));\u000A                            uint _211 = _209 >> _210;\u000A                            uint _212 = (uint)(ADD_UINT64_T_SUFFIX(1));\u000A                            uint _213 = _211 & _212;\u000A                            bool _214 = (bool)(_213);\u000A                            uint _216 = (uint)(ADD_UINT64_T_SUFFIX(32767));\u000A                            uint _217 = _209 & _216;\u000A                            uint _218 = (uint)(ADD_UINT64_T_SUFFIX(24576));\u000A                            uint _219 = _217 - _218;\u000A                            int _220 = (int)(_219);\u000A                            int _221 = _220 >> 8;\u000A                            int _223 = _220 >> 3;\u000A                            int _224 = _223 & 31;\u000A                            _bFeeder_DB_0_ibuffer[_214][_221][_224]\u000A                                                 [_bFeeder_s0_buf] = _207;\u000A                        } // if _205\u000A                    }     // if _195\u000A                    uint _226 = _bFeeder_time_stamp_shreg;\u000A                    uint _227 = (uint)(ADD_UINT64_T_SUFFIX(15));\u000A                    uint _228 = _226 >> _227;\u000A                    int _229 = (int)(_228);\u000A                    int _230 = TOTAL_K >> 9;\u000A                    int _231 = TOTAL_I / 320;\u000A                    int _232 = TOTAL_J >> 8;\u000A                    int _233 = _231 * _232;\u000A                    int _234 = _230 * _233;\u000A                    bool _235 = _229 <= _234;\u000A                    uint _236 = (uint)(ADD_UINT64_T_SUFFIX(0));\u000A                    bool _238 = _236 < _228;\u000A                    bool _239 = _235 && _238;\u000A                    if (_239) {\u000A                        uint _241 = _bFeeder_time_stamp_shreg;\u000A                        uint _242 = (uint)(ADD_UINT64_T_SUFFIX(15));\u000A                        uint _243 = _241 >> _242;\u000A                        uint _244 = (uint)(ADD_UINT64_T_SUFFIX(1));\u000A                        uint _245 = _243 & _244;\u000A                        bool _246 = (bool)(_245);\u000A                        bool _247 = !(_246);\u000A                        uint _249 = (uint)(ADD_UINT64_T_SUFFIX(32767));\u000A                        uint _250 = _241 & _249;\u000A                        int _251 = (int)(_250);\u000A                        int _252 = _251 >> 10;\u000A                        int _254 = _251 & 31;\u000A                        float16 _255 = _bFeeder_DB_0_ibuffer[_247][_252][_254]\u000A                                                            [_bFeeder_s0_buf];\u000A                        _bFeeder_channel_array.s[_bFeeder_s0_buf] = _255;\u000A                        (void)_bFeeder_s0_buf;\u000A                    } // if _239\u000A                }     // for _bFeeder_s0_buf\u000A                uint _257 = _bFeeder_time_stamp_shreg;\u000A                uint _258 = (uint)(ADD_UINT64_T_SUFFIX(15));\u000A                uint _259 = _257 >> _258;\u000A                int _260 = (int)(_259);\u000A                int _261 = TOTAL_K >> 9;\u000A                int _262 = TOTAL_I / 320;\u000A                int _263 = TOTAL_J >> 8;\u000A                int _264 = _262 * _263;\u000A                int _265 = _261 * _264;\u000A                bool _266 = _260 <= _265;\u000A                uint _267 = (uint)(ADD_UINT64_T_SUFFIX(0));\u000A                bool _269 = _267 < _259;\u000A                bool _270 = _266 && _269;\u000A                if (_270) {\u000A                    _bFeeder_channel::write(_bFeeder_channel_array);\u000A                    (void)_bFeeder_channel_array;\u000A                } // if _270\u000A                uint _271 = _bFeeder_cycle_temp;\u000A                uint _272 = (uint)(ADD_UINT64_T_SUFFIX(1));\u000A                uint _273 = _271 + _272;\u000A                _bFeeder_cycle_temp = _273;\u000A            } // for _bFeeder_s0_outermost_loop\u000A        });\u000A    }));\u000A\u000A    // kernel_Out\u000A    std::cout << \"kernel_Out\" << std::endl;\u000A    oneapi_kernel_events.push_back(q.submit([&](sycl::handler &h) {\u000A        h.single_task<class kernel_Out>([=]() {\u000A            _bFeeder_channel_array_t _bFeeder_channel_array;\u000A            _aFeeder_channel_array_t _aFeeder_channel_array;\u000A            // produce Z\u000A            float _Z_shreg[1024][8][10];\u000A            float _Z_pipe_shreg[8][9217];\u000A            // produce Y\u000A            float16 _Y_shreg[8];\u000A            float _Z_temp[8][10];\u000A            // produce X\u000A            float16 _X_shreg[10];\u000A            float _Z_shreg_temp;\u000A            int _Z_pipe_iter_temp;\u000A            int _Z_pipe_base_temp;\u000A            _Z_pipe_iter_temp = 10240;\u000A            _Z_pipe_base_temp = 0;\u000A            int _274 = TOTAL_K >> 9;\u000A            int _275 = TOTAL_I / 320;\u000A            int _276 = TOTAL_J >> 8;\u000A            int _277 = _275 * _276;\u000A            int _278 = _274 * _277;\u000A            int _279 = _278 + 1;\u000A            for (int _X_s0_i_j_k = 0; _X_s0_i_j_k < 0 + _279; _X_s0_i_j_k++) {\u000A                for (int _X_s0_kk_ii_jj = 0; _X_s0_kk_ii_jj < 0 + 32768;\u000A                     _X_s0_kk_ii_jj++) {\u000A#pragma unroll\u000A                    for (int _dummy__1_s0_iii = 0; _dummy__1_s0_iii < 0 + 10;\u000A                         _dummy__1_s0_iii++) {\u000A#pragma unroll\u000A                        for (int _dummy_s0_jjj = 0; _dummy_s0_jjj < 0 + 8;\u000A                             _dummy_s0_jjj++) {\u000A                            float _281 =\u000A                                _Z_shreg[1023][_dummy_s0_jjj][_dummy__1_s0_iii];\u000A                            _Z_temp[_dummy_s0_jjj][_dummy__1_s0_iii] = _281;\u000A#pragma unroll\u000A                            for (int _dummy__2_s0_l1 = 0;\u000A                                 _dummy__2_s0_l1 < 0 + 1023;\u000A                                 _dummy__2_s0_l1++) {\u000A                                int _282 = 1023 - _dummy__2_s0_l1;\u000A                                int _283 = 1022 - _dummy__2_s0_l1;\u000A                                float _285 = _Z_shreg[_283][_dummy_s0_jjj]\u000A                                                     [_dummy__1_s0_iii];\u000A                                _Z_shreg[_282][_dummy_s0_jjj]\u000A                                        [_dummy__1_s0_iii] = _285;\u000A                                (void)_285;\u000A                            } // for _dummy__2_s0_l1\u000A                            float _286 =\u000A                                _Z_temp[_dummy_s0_jjj][_dummy__1_s0_iii];\u000A                            _Z_shreg[0][_dummy_s0_jjj][_dummy__1_s0_iii] = _286;\u000A                            (void)_286;\u000A                        } // for _dummy_s0_jjj\u000A                    }     // for _dummy__1_s0_iii\u000A                    int _287 = TOTAL_K >> 9;\u000A                    int _288 = TOTAL_I / 320;\u000A                    int _289 = TOTAL_J >> 8;\u000A                    int _290 = _288 * _289;\u000A                    int _291 = _287 * _290;\u000A                    bool _292 = _X_s0_i_j_k < _291;\u000A                    if (_292) {\u000A                        _bFeeder_channel_array_t __293 =\u000A                            _bFeeder_channel::read();\u000A                        _bFeeder_channel_array = __293;\u000A                        (void)__293;\u000A                        _aFeeder_channel_array_t __294 =\u000A                            _aFeeder_channel::read();\u000A                        _aFeeder_channel_array = __294;\u000A                        (void)__294;\u000A                    } // if _292\u000A#pragma unroll\u000A                    for (int _X_s0_iii = 0; _X_s0_iii < 0 + 10; _X_s0_iii++) {\u000A#pragma unroll\u000A                        for (int _X_s0_jjj = 0; _X_s0_jjj < 0 + 8;\u000A                             _X_s0_jjj++) {\u000A                            float16 _295;\u000A                            bool _296 = _X_s0_jjj == 0;\u000A                            if (_296) {\u000A                                float16 __297 =\u000A                                    _aFeeder_channel_array.s[_X_s0_iii];\u000A                                _295 = __297;\u000A                            } // if _296\u000A                            else {\u000A                                float16 _299 = _X_shreg[_X_s0_iii];\u000A                                _295 = _299;\u000A                            } // if _296 else\u000A                            float16 _300 = _295;\u000A                            _X_shreg[_X_s0_iii] = _300;\u000A                            (void)_300;\u000A                            float16 _302 = _X_shreg[_X_s0_iii];\u000A                            float16 _303;\u000A#pragma unroll\u000A                            for (int reg_idx = 0; reg_idx < 16; reg_idx++) {\u000A                                _303[reg_idx] = sycl::ext::intel::fpga_reg(\u000A                                    sycl::ext::intel::fpga_reg(_302[reg_idx]));\u000A                            }\u000A\u000A                            _X_shreg[_X_s0_iii] = _303;\u000A                            (void)_303;\u000A                            float16 _304;\u000A                            bool _305 = _X_s0_iii == 0;\u000A                            if (_305) {\u000A                                float16 __306 =\u000A                                    _bFeeder_channel_array.s[_X_s0_jjj];\u000A                                _304 = __306;\u000A                            } // if _305\u000A                            else {\u000A                                float16 _308 = _Y_shreg[_X_s0_jjj];\u000A                                _304 = _308;\u000A                            } // if _305 else\u000A                            float16 _309 = _304;\u000A                            _Y_shreg[_X_s0_jjj] = _309;\u000A                            (void)_309;\u000A                            float16 _311 = _Y_shreg[_X_s0_jjj];\u000A                            float16 _312;\u000A#pragma unroll\u000A                            for (int reg_idx = 0; reg_idx < 16; reg_idx++) {\u000A                                _312[reg_idx] = sycl::ext::intel::fpga_reg(\u000A                                    sycl::ext::intel::fpga_reg(_311[reg_idx]));\u000A                            }\u000A\u000A                            _Y_shreg[_X_s0_jjj] = _312;\u000A                            (void)_312;\u000A                            float _313;\u000A                            int _314 = TOTAL_K >> 9;\u000A                            int _315 = _X_s0_i_j_k % _314;\u000A                            bool _316 = _315 == 0;\u000A                            int _317 = _X_s0_kk_ii_jj >> 10;\u000A                            bool _318 = _317 == 0;\u000A                            bool _319 = _316 && _318;\u000A                            if (_319) {\u000A                                float _320 = 0.0f;\u000A                                _313 = _320;\u000A                            } // if _319\u000A                            else {\u000A                                float _322 = _Z_shreg[0][_X_s0_jjj][_X_s0_iii];\u000A                                float _323 = sycl::ext::intel::fpga_reg(_322);\u000A                                _313 = _323;\u000A                            } // if _319 else\u000A                            float _324 = _313;\u000A                            _Z_shreg_temp = _324;\u000A#pragma unroll\u000A                            for (int _X_s0_kkk = 0; _X_s0_kkk < 0 + 16;\u000A                                 _X_s0_kkk++) {\u000A                                float _325 = _Z_shreg_temp;\u000A                                float _327 = _X_shreg[_X_s0_iii][_X_s0_kkk];\u000A                                float _329 = _Y_shreg[_X_s0_jjj][_X_s0_kkk];\u000A                                float _330 = _327 * _329;\u000A                                float _331 = _325 + _330;\u000A                                _Z_shreg_temp = _331;\u000A                                int _332 = _X_s0_kkk & 3;\u000A                                bool _333 = _332 == 3;\u000A                                if (_333) {\u000A                                    float _334 = _Z_shreg_temp;\u000A                                    float _335 =\u000A                                        sycl::ext::intel::fpga_reg(_334);\u000A                                    _Z_shreg_temp = _335;\u000A                                } // if _333\u000A                            }     // for _X_s0_kkk\u000A                            float _336 = _Z_shreg_temp;\u000A                            _Z_shreg[0][_X_s0_jjj][_X_s0_iii] = _336;\u000A                            (void)_336;\u000A#pragma unroll\u000A                            for (int _X_s0_kkk = 0; _X_s0_kkk < 0 + 16;\u000A                                 _X_s0_kkk++) {\u000A                                bool _337 = _X_s0_kkk == 15;\u000A                                int _338 = _X_s0_kk_ii_jj >> 10;\u000A                                bool _339 = _338 == 31;\u000A                                bool _340 = _337 && _339;\u000A                                int _341 = TOTAL_K >> 9;\u000A                                int _342 = _X_s0_i_j_k % _341;\u000A                                int _343 = _341 + -1;\u000A                                bool _344 = _342 == _343;\u000A                                bool _345 = _340 && _344;\u000A                                if (_345) {\u000A                                    int _346 = _X_s0_iii * 1024;\u000A                                    float _348 =\u000A                                        _Z_shreg[0][_X_s0_jjj][_X_s0_iii];\u000A                                    _Z_pipe_shreg[_X_s0_jjj][_346] = _348;\u000A                                    (void)_348;\u000A                                } // if _345\u000A                            }     // for _X_s0_kkk\u000A                        }         // for _X_s0_jjj\u000A                    }             // for _X_s0_iii\u000A                    int _349 = TOTAL_K >> 9;\u000A                    int _350 = _X_s0_i_j_k % _349;\u000A                    int _351 = _349 + -1;\u000A                    bool _352 = _350 == _351;\u000A                    int _353 = _X_s0_kk_ii_jj >> 10;\u000A                    bool _354 = _353 == 31;\u000A                    bool _355 = _352 && _354;\u000A                    int _356 = _X_s0_kk_ii_jj & 31;\u000A                    bool _357 = _356 == 0;\u000A                    int _358 = _X_s0_kk_ii_jj & 1023;\u000A                    int _359 = _358 >> 5;\u000A                    bool _360 = _359 == 0;\u000A                    bool _361 = _357 && _360;\u000A                    bool _362 = _355 && _361;\u000A                    if (_362) {\u000A                        int _363 = _Z_pipe_iter_temp;\u000A                        _Z_pipe_base_temp = _363;\u000A                    } // if _362\u000A                    float8 _Out_channel_temp;\u000A#pragma unroll\u000A                    for (int _Z_pipe_b__14 = 0; _Z_pipe_b__14 < 0 + 8;\u000A                         _Z_pipe_b__14++) {\u000A                        float _365 = _Z_pipe_shreg[_Z_pipe_b__14][0];\u000A                        _Out_channel_temp[_Z_pipe_b__14] = _365;\u000A#pragma unroll\u000A                        for (int _Z_pipe_b__14_dummy = 0;\u000A                             _Z_pipe_b__14_dummy < 0 + 8;\u000A                             _Z_pipe_b__14_dummy++) {\u000A                            float _366 = _Out_channel_temp[_Z_pipe_b__14_dummy];\u000A                            float _367 = sycl::ext::intel::fpga_reg(\u000A                                sycl::ext::intel::fpga_reg(_366));\u000A                            _Out_channel_temp[_Z_pipe_b__14_dummy] = _367;\u000A                        } // for _Z_pipe_b__14_dummy\u000A                    }     // for _Z_pipe_b__14\u000A                    int _368 = _Z_pipe_iter_temp;\u000A                    int _369 = _Z_pipe_base_temp;\u000A                    int _370 = _369 + 10240;\u000A                    bool _371 = _368 < _370;\u000A                    if (_371) {\u000A                        float8 _372 = _Out_channel_temp;\u000A                        _Out_channel::write(_372);\u000A                        (void)_372;\u000A                    } // if _371\u000A#pragma unroll\u000A                    for (int _Z_pipe_b__15 = 0; _Z_pipe_b__15 < 0 + 8;\u000A                         _Z_pipe_b__15++) {\u000A#pragma unroll\u000A                        for (int _Z_pipe_p__7 = 0; _Z_pipe_p__7 < 0 + 9;\u000A                             _Z_pipe_p__7++) {\u000A#pragma unroll\u000A                            for (int _Z_pipe_l__7 = 0; _Z_pipe_l__7 < 0 + 1023;\u000A                                 _Z_pipe_l__7++) {\u000A                                int _373 = _Z_pipe_p__7 * 1024;\u000A                                int _374 = _373 + _Z_pipe_l__7;\u000A                                int _375 = _374 + 1;\u000A                                float _377 = _Z_pipe_shreg[_Z_pipe_b__15][_375];\u000A                                _Z_pipe_shreg[_Z_pipe_b__15][_374] = _377;\u000A                                (void)_377;\u000A                            } // for _Z_pipe_l__7\u000A                            int _378 = _Z_pipe_p__7 * 1024;\u000A                            int _379 = _378 + 1023;\u000A                            int _380 = _378 + 1024;\u000A                            float _382 = _Z_pipe_shreg[_Z_pipe_b__15][_380];\u000A                            float _383 = sycl::ext::intel::fpga_reg(\u000A                                sycl::ext::intel::fpga_reg(_382));\u000A                            _Z_pipe_shreg[_Z_pipe_b__15][_379] = _383;\u000A                            (void)_383;\u000A                        } // for _Z_pipe_p__7\u000A                    }     // for _Z_pipe_b__15\u000A                    int _384 = _Z_pipe_iter_temp;\u000A                    int _385 = _384 + 1;\u000A                    _Z_pipe_iter_temp = _385;\u000A                } // for _X_s0_kk_ii_jj\u000A            }     // for _X_s0_i_j_k\u000A        });\u000A    }));\u000A\u000A    // kernel_unloader\u000A    std::cout << \"kernel_unloader\" << std::endl;\u000A    oneapi_kernel_events.push_back(q.submit([&](sycl::handler &h) {\u000A        h.single_task<class kernel_unloader>(\u000A            [=]() [[intel::kernel_args_restrict]] {\u000A                device_ptr<float> serialized_C_d(serialized_C_device);\u000A                int _addr_temp;\u000A                _addr_temp = 0;\u000A                int _386 = TOTAL_I / 320;\u000A                for (int _unloader_s0_i = 0; _unloader_s0_i < 0 + _386;\u000A                     _unloader_s0_i++) {\u000A                    int _387 = TOTAL_J >> 8;\u000A                    for (int _unloader_s0_j = 0; _unloader_s0_j < 0 + _387;\u000A                         _unloader_s0_j++) {\u000A                        for (int _unloader_s0_iii_ii_jj = 0;\u000A                             _unloader_s0_iii_ii_jj < 0 + 10240;\u000A                             _unloader_s0_iii_ii_jj++) {\u000A                            float8 __388 = _Out_channel::read();\u000A                            int _389 = _addr_temp;\u000A                            int _390 = _389 * 8;\u000A#pragma unroll\u000A                            for (int vec_idx = 0; vec_idx < 8; vec_idx++) {\u000A                                serialized_C_d[_390 + vec_idx] = __388[vec_idx];\u000A                            }\u000A                            int _391 = _addr_temp;\u000A                            int _392 = _391 + 1;\u000A                            _addr_temp = _392;\u000A                        } // for _unloader_s0_iii_ii_jj\u000A                    }     // for _unloader_s0_j\u000A                }         // for _unloader_s0_i\u000A            });\u000A    }));\u000A\u000A    for (unsigned int i = 0; i < oneapi_kernel_events.size(); i++) {\u000A        oneapi_kernel_events.at(i).wait();\u000A    };\u000A\u000A    if (oneapi_kernel_events.size() > 0) {\u000A        double k_earliest_start_time =\u000A            oneapi_kernel_events.at(0)\u000A                .get_profiling_info<\u000A                    sycl::info::event_profiling::command_start>();\u000A        double k_latest_end_time =\u000A            oneapi_kernel_events.at(0)\u000A                .get_profiling_info<sycl::info::event_profiling::command_end>();\u000A        for (unsigned i = 1; i < oneapi_kernel_events.size(); i++) {\u000A            double tmp_start =\u000A                oneapi_kernel_events.at(i)\u000A                    .get_profiling_info<\u000A                        sycl::info::event_profiling::command_start>();\u000A            double tmp_end =\u000A                oneapi_kernel_events.at(i)\u000A                    .get_profiling_info<\u000A                        sycl::info::event_profiling::command_end>();\u000A            if (tmp_start < k_earliest_start_time) {\u000A                k_earliest_start_time = tmp_start;\u000A            }\u000A            if (tmp_end > k_latest_end_time) {\u000A                k_latest_end_time = tmp_end;\u000A            }\u000A        }\u000A        // Get time in ns\u000A        double events_time = (k_latest_end_time - k_earliest_start_time);\u000A        printf(\"  Time: %.5f ns\\n\", events_time);\u000A        printf(\"  Throughput: %.2f GFLOPS\\n\",\u000A               (double)2.0 * (TOTAL_K) * (double)(TOTAL_I) * (double)(TOTAL_J) /\u000A                   events_time);\u000A    }\u000A\u000A    std::cout << \"memcpy matrix C device->host\" << std::endl;\u000A    q.memcpy(serialized_C, serialized_C_device, num_elem_C * sizeof(float))\u000A        .wait();\u000A\u000A    // kernel_C_deserializer\u000A    std::cout << \"kernel_C_deserializer\" << std::endl;\u000A    addr = 0;\u000A    for (size_t i = 0; i < I; i++)\u000A        for (size_t j = 0; j < J; j++)\u000A            for (size_t iii = 0; iii < III; iii++)\u000A                for (size_t ii = 0; ii < II; ii++)\u000A                    for (size_t jj = 0; jj < JJ; jj++)\u000A                        for (size_t jjj = 0; jjj < JJJ; jjj++) {\u000A                            size_t total_i = iii + III * ii + III * II * i;\u000A                            size_t total_j = jjj + JJJ * jj + JJJ * JJ * j;\u000A                            C[total_j + total_i * TOTAL_J] =\u000A                                serialized_C[addr++];\u000A                        }\u000A\u000A    free(serialized_A);\u000A    free(serialized_B);\u000A    free(serialized_C);\u000A    sycl::free(serialized_A_device, q);\u000A    sycl::free(serialized_B_device, q);\u000A    sycl::free(serialized_C_device, q);\u000A}\u000A"}]